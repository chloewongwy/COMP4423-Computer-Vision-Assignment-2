# -*- coding: utf-8 -*-
"""Volume_rendering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wv7mk9Apl5--uS4pnvrhnCeLRBPEYwqP
"""

import numpy as np
import matplotlib.pyplot as plt

def volume_rendering(rgb, sigma, t_vals):
    """
    Compute pixel color using volume rendering and return key intermediate values.
    """
    dists = np.diff(t_vals, axis=-1, append=t_vals[..., -1:])
    alpha = 1.0 - np.exp(-sigma * dists)  # Opacity of each sample
    cumulative = np.cumsum(sigma * dists, axis=-1)  #cumulative sum of previous sigma * delta
    transmittance = np.exp(-np.concatenate([np.zeros_like(cumulative[..., :1]), cumulative[..., :-1]], axis=-1))  # Light that reaches each sample
    weights = transmittance * alpha  # Final weight for each sample
    pixel_color = np.sum(weights[..., None] * rgb, axis=-2)  # Compute final pixel color
    return pixel_color, weights, alpha, transmittance

def visualize_volume_rendering(num_samples=50):
    """
    Visualizes the key components of volume rendering: opacity, transmittance, and sample contributions.

    Args:
        num_samples (int): Number of sample points along the ray.
    """
    # Define depth sampling along the ray
    t_vals = np.linspace(0, 1, num_samples)  # Sampling depths
    sigma = np.linspace(0, 5, num_samples)  # Density increases along the ray
    rgb = np.tile(np.linspace(0, 1, num_samples)[..., None], (1, 3))  # RGB colors from black to white

    # Compute volume rendering components
    pixel_color, weights, opacity, transmittance = volume_rendering(rgb, sigma, t_vals)

    # Visualization
    fig, axes = plt.subplots(3, 1, figsize=(10, 8), sharex=True)

    # 1. Opacity (Alpha values)
    axes[0].plot(t_vals, opacity, label="Opacity (1 - exp(-sigma * d))", color='red')
    axes[0].set_ylabel("Opacity")
    axes[0].legend()
    axes[0].grid(True)

    # 2. Transmittance (Light reaching each point)
    axes[1].plot(t_vals, transmittance, label="Transmittance (exp(-cumsum(sigma * d)))", color='blue')
    axes[1].set_ylabel("Transmittance")
    axes[1].legend()
    axes[1].grid(True)

    # 3. Contribution (Weighting of each sample to the final pixel color)
    axes[2].plot(t_vals, weights, label="Final Contribution (weights)", color='green')
    axes[2].set_xlabel("Depth Along Ray")
    axes[2].set_ylabel("Weight")
    axes[2].legend()
    axes[2].grid(True)

    plt.suptitle("Visualization of Volume Rendering Components")
    plt.show()

# Example usage
visualize_volume_rendering(num_samples=50)